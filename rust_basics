# 1.1 notes
#The main function is the entry point of a Rust program. parameters go inside the parentheses. 
the function body goes inside the curly braces.

fn main() { 
    println! ("Hello, world!"); 
} 

#Creating a project with cargo- 1.2 notes.
# Cargo is Rust's package manager and build system. It helps you manage dependencies, build your project, and run tests.
# To create a new project with cargo, run the following command in your terminal:
###cargo new my_project
# This will create a new directory called my_project with a basic Rust project structure.
# The main.rs file is the entry point of your Rust program. It contains the main function, which is where your program starts executing.
# The Cargo.toml file is the manifest file for your project. It contains metadata about your project, such as its name, version, and dependencies.
# To build and run your project, navigate to the project directory and run the following command:
###cargo build
# This will compile your project and create an executable file in the target/debug directory.
###./target/debug/my_project
# Additionally to run your project quickly, you can use the following command:
###cargo run
# This will compile your project and run the main function.

#We can create a project using cargo new.
#We can build a project using cargo build.
#We can build and run a project in one step using cargo run.
#We can build a project without producing a binary to check for errors using cargo check.
#Instead of saving the result of the build in the same directory as our code, Cargo stores it in the target/debug directory.
## cargo build --release This command will create an executable in target/release instead of target/debug.

#Chapter 2 notes- Guessing Game
#let, match, methods, associated functions, external crates
#cargo doc --open command will build documentation provided by all your dependencies locally and open it in your browser. 

#io= input/output library - std=standard library - std::io accept user input 
#let statement is used to create a variable.
#Variables are immutable by default in Rust. To make a variable mutable, use the mut keyword.
#The let mut guess = String::new(); line has created a mutable variable that is currently bound to a new, empty instance of a String.
#The & indicates that this argument is a reference, which gives you a way to let multiple parts of your code access one piece of data without needing to copy that data into memory multiple times.
#read_line puts whatever the user enters into the string we pass to it, but it also returns a Result value.
#expect will cause the program to crash and display the message that you passed as an argument to expect if an error occurs.
#a crate is a collection of Rust source code files. The project we’ve been building is a binary crate, which is an executable. 
    #The rand crate is a library crate, which contains code that is intended to be used in other programs and can’t be executed on its own.
#When you do want to update a crate, Cargo provides the command update, which will ignore the Cargo.lock file and figure out all the latest versions that fit your specifications in Cargo.toml. Cargo will then write those versions to the Cargo.lock file. 
#the line use rand::Rng;. The Rng trait defines methods that random number generators implement, and this trait must be in scope for us to use those methods.
#The rand::rng function will give us the particular random number generator that we’re going to use: one that is local to the current thread of execution and seeded by the operating system.
#The random_range method is defined by the Rng trait that we brought into scope with use rand::Rng. This method is defined on types that implement Rng, and we call it on the random number generator.
#The cmp method compares two values and can be called on anything that can be compared. It takes a reference to whatever you want to compare with: here it’s comparing guess to secret_number
#We use a match expression to decide what to do next based on which variant of Ordering was returned from the call to cmp with the values in guess and secret_number.
#The cmp method compares two values and can be called on anything that can be compared. It takes a reference to whatever you want to compare with: here it’s comparing guess to secret_number
#Shadowing lets us reuse the guess variable name rather than forcing us to create two unique variables
#The loop keyword creates an infinite loop. 
#break statement to exit the loop.
#We switch from an expect call to a match expression to move from crashing on an error to handling the error. Remember that parse returns a Result type and Result is an enum that has the variants Ok and Err. We’re using a match expression here, as we did with the Ordering result of the cmp method.